now = datetime.now()
file_path= Config.LOGGER_PATH +'/{}/'+now.strftime("%d-%m-%Y")+ '.json'
try:
	dictConfig({
		'version':1,
		'disable_existing_loggers': True,
		'formatters':{
			'large':{	
				'datefmt': time.strftime('%H-%M-%S'),
				'format': (
						'{"user_id":%(user_id)d,"time":"%(asctime)s ","Line No.":%(lineno)d ,"path": "%(pathname)s ","level": "%(levelname)s ", "message":  "%(message)s "},'
						)
					}
				},

		'handlers':{     
			'errors_file':{
				'level':'ERROR',
				'class':'logging.handlers.TimedRotatingFileHandler',
				'when':'midnight',
				'interval':1,
				'filename':file_path.format("error_logs"),
				'formatter':'large',
			},
			'info_file':{
				'level':'INFO',
				'class':'logging.handlers.TimedRotatingFileHandler',
				'when':'midnight',
				'interval':1,
				'filename':file_path.format("info_logs"),
				'formatter':'large',
			},
			'debug_file':{
				'level':'DEBUG',
				'class':'logging.handlers.TimedRotatingFileHandler',
				'when':'midnight',
				'interval':1,
				'filename':file_path.format("debug_logs"),
				'formatter':'large',
			},
			'critical_file':{
				'level':'CRITICAL',
				'class':'logging.handlers.TimedRotatingFileHandler',
				'when':'midnight',
				'interval':1,
				'filename':file_path.format("critical_logs"),
				'formatter':'large',
			}
		},
		'loggers':{
			'error_logger':{
				'handlers':['errors_file'],
				'level':'WARNING',
				'propagate':False,
			},
			'info_logger':{
				'handlers':['info_file'],
				'level':'INFO',
				'propagate':False,
			},
			'debug_logger':{
				'handlers':['debug_file'],
				'level':'DEBUG',
				'propagate':False,
			},
			'critical_logger':{
				'handlers':['critical_file'],
				'level':'CRITICAL',
				'propagate':False,
			}
		},
	})
except Exception as e:
	print(e)
info_logger= logging.getLogger("info_logger")
debug_logger= logging.getLogger("debug_logger")
error_logger= logging.getLogger("error_logger")
critical_logger= logging.getLogger("critical_logger")
